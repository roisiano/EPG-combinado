name: EPG Workflow

on:
  schedule:
    - cron: '0 7 * * *'  # Ejecuta a las 07:00 UTC cada día
  workflow_dispatch:  # Permite ejecutar manualmente el flujo de trabajo

jobs:
  epg:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install requests lxml

      - name: Download EPG and process
        run: |
          # Crear directorio de trabajo
          mkdir -p /tmp/epg

          # Descargar archivo XML
          curl -L -o /tmp/epg/epg.xml.gz https://github.com/davidmuma/EPG_dobleM/raw/master/guiatv_color.xml.gz

          # Descomprimir el archivo
          gunzip -f /tmp/epg/epg.xml.gz

          # Filtrar y guardar los archivos EPG por día
          python3 -c "
import os
from datetime import datetime

# Directorios y archivos
output_dir = '/tmp/epg'
combined_file = f'{output_dir}/EPGcombinado.xml'
epg_actual_file = f'{output_dir}/epg.xml'

# Asegurarse de que el directorio existe
os.makedirs(output_dir, exist_ok=True)

# Filtrar por día
def filter_epg_by_day(target_date, input_file, output_file):
    date_filter = datetime.strptime(target_date, '%d.%m.%Y').strftime('%Y%m%d')
    with open(input_file, 'r') as infile, open(output_file, 'w') as outfile:
        inside_programme = False
        for line in infile:
            if '<programme start=' in line:
                inside_programme = True
            if inside_programme:
                outfile.write(line)
            if '</tv>' in line:
                inside_programme = False

# Filtrar por fecha actual
today = datetime.now().strftime('%d.%m.%Y')
filter_epg_by_day(today, '/tmp/epg.xml', f'{output_dir}/{today}.xml')

# Combinar EPGs
def combine_epgs(output_dir, combined_file, epg_actual_file):
    # Listar y combinar archivos EPG
    files = sorted([f for f in os.listdir(output_dir) if f.endswith('.xml')])

    if not files:
        return

    # Primer archivo (el más antiguo)
    first_file = os.path.join(output_dir, files[0])
    with open(first_file, 'r') as infile, open(combined_file, 'w') as outfile:
        # Copiar el contenido del primer archivo sin la última línea </tv>
        lines = infile.readlines()
        outfile.writelines(lines[:-1])

    # Añadir archivos subsiguientes
    for epg_file in files[1:]:
        with open(os.path.join(output_dir, epg_file), 'r') as infile, open(combined_file, 'a') as outfile:
            lines = infile.readlines()
            inside_programme = False
            for line in lines:
                if '<programme start=' in line:
                    inside_programme = True
                if inside_programme:
                    outfile.write(line)

    # Añadir el archivo actual
    if os.path.isfile(epg_actual_file):
        with open(epg_actual_file, 'r') as infile, open(combined_file, 'a') as outfile:
            lines = infile.readlines()
            inside_programme = False
            for line in lines:
                if '<programme start=' in line:
                    inside_programme = True
                if inside_programme:
                    outfile.write(line)
        
        # Añadir la etiqueta de cierre </tv>
        with open(combined_file, 'a') as outfile:
            outfile.write('</tv>\n')

combine_epgs(output_dir, combined_file, '/tmp/epg.xml')
          "

      - name: Create release and upload artifact
        env:
          GITHUB_TOKEN: ${{ secrets.TKN1 }}  # Usa el secreto para autenticar con la API
        run: |
          REPO_OWNER="roisiano"
          REPO_NAME="EPG-combinado"
          TAG_NAME="v$(date +'%Y%m%d%H%M%S')"
          RELEASE_NAME="EPG Release $(date +'%d-%m-%Y %H:%M:%S')"
          COMBINED_FILE="/tmp/epg/EPGcombinado.xml"

          # Crear una nueva release
          RESPONSE=$(curl -s -X POST -H "Authorization: token $GITHUB_TOKEN" \
            -d "{\"tag_name\":\"$TAG_NAME\",\"name\":\"$RELEASE_NAME\"}" \
            "https://api.github.com/repos/$REPO_OWNER/$REPO_NAME/releases")

          # Extraer el ID de la release creada
          RELEASE_ID=$(echo "$RESPONSE" | jq -r '.id')

          # Subir el archivo como un asset de la release
          curl -s -X POST -H "Authorization: token $GITHUB_TOKEN" \
            -H "Content-Type: application/octet-stream" \
            --data-binary @"$COMBINED_FILE" \
            "https://uploads.github.com/repos/$REPO_OWNER/$REPO_NAME/releases/$RELEASE_ID/assets?name=EPGcombinado.xml"
